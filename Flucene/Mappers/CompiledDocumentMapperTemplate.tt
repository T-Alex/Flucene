<#@ template language="C#" #>
<#@ import namespace="Lucene.Net.Odm.Mapping" #>
<#@ import namespace="Lucene.Net.Odm.Helpers" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;

using Lucene.Net.Documents;
using Lucene.Net.Odm.Mapping;


namespace Lucene.Net.Odm.Mappers
{
    public partial class <#= ShortModelName #>CompiledMapper : Lucene.Net.Odm.Mappers.ICompiledMapper<<#= ModelName #>>
    {
        public Document GetDocument(<#= ModelName #> model)
        {
            Document document = new Document();

        <# foreach (PropertyMapping propMapping in DocumentMapping.PropertyMappings) { #>
            document.Add(model.<#= propMapping.PropertyInfo.Name #>);
        <# } #>

            return document;
        }

        public <#= ModelName #> GetModel(Document document)
        {
            <#= ModelName #> model = new <#= ModelName #>();

        <# foreach (PropertyMapping propMapping in DocumentMapping.PropertyMappings) { #>
            model.<#= propMapping.PropertyInfo.Name #> = <#= GetPropertyRaw(propMapping) #>;     
        <# } #>

            return model;
        }
    }
}

<#+
    const string enumFormat = "({0})Enum.Parse(typeof({0}), document.Get(\"{1}\"), true)";
    const string convertFormat = "({0})Convert.ChangeType(document.Get(\"{1}\"), typeof({2}), CultureInfo.InvariantCulture)";

    public string ShortModelName { get; set; }
    public string ModelName { get; set; }
    public dynamic DocumentMapping {get; set; }

    private string GetPropertyRaw(PropertyMapping propMapping)
    {
        string fieldName = propMapping.FieldConfiguration.FieldName;
        Type propertyType = propMapping.PropertyInfo.PropertyType;

        if (propertyType == typeof(string))
        {
            return String.Format("document.Get(\"{0}\")", fieldName);
        }
        else if (propertyType.IsEnum)
        {
            return String.Format(enumFormat, propertyType, fieldName);
        }
        else if (propertyType == typeof(DateTime))
        {
            return String.Format("DataHelper.ParseDateTime(document.Get(\"{0}\"))", fieldName);
        }
        else if (DataHelper.IsConvertibleType(propertyType))
        {
            return String.Format(convertFormat, propertyType.Name, fieldName, propertyType.Name);
        }
        else if (DataHelper.IsNullableType(propertyType))
        {
            Type baseType = Nullable.GetUnderlyingType(propertyType);
            if (DataHelper.IsConvertibleType(baseType))
                return String.Format(convertFormat, baseType.Name + "?", fieldName, baseType.Name);
            else
                throw new ArgumentException("This type is not supported.");
        }
        else if(DataHelper.IsGenericEnumerable(propertyType))
        {
            return null;
        }
        else
        {
            return String.Empty;
        }
    }
#>